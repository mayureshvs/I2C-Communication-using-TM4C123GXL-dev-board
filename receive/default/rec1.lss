
rec1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000072  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  00000101  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  00000177  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c3  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000007e  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1c c0       	rjmp	.+56     	; 0x6e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#define UBRR ((F_CPU/16/BAUD)-1)
#include <util/delay.h>

int main(void)
{
UBRRH  |= (UBRR>>8);
  38:	80 b5       	in	r24, 0x20	; 32
  3a:	80 bd       	out	0x20, r24	; 32
UBRRL  |= UBRR;
  3c:	89 b1       	in	r24, 0x09	; 9
  3e:	87 66       	ori	r24, 0x67	; 103
  40:	89 b9       	out	0x09, r24	; 9
UCSRB |= (1<<RXEN)| (1<<TXEN);
  42:	8a b1       	in	r24, 0x0a	; 10
  44:	88 61       	ori	r24, 0x18	; 24
  46:	8a b9       	out	0x0a, r24	; 10

UCSRC|= (1<<UMSEL);
  48:	80 b5       	in	r24, 0x20	; 32
  4a:	80 64       	ori	r24, 0x40	; 64
  4c:	80 bd       	out	0x20, r24	; 32
DDRC |= (1<<1);
  4e:	a1 9a       	sbi	0x14, 1	; 20
DDRC &=(~(1<<0));
  50:	a0 98       	cbi	0x14, 0	; 20

UCSRA |=(0<<DOR);
  52:	8b b1       	in	r24, 0x0b	; 11
  54:	8b b9       	out	0x0b, r24	; 11
				
              if(UCSRA&(1<<UDRE))

                { 

                  UDR = 0b11110000;//once transmitter is ready sent eight bit data
  56:	90 ef       	ldi	r25, 0xF0	; 240
		//PORTC=(1<<3);
		//_delay_ms(100);
		//PORTC=(0<<3);	
		//_delay_ms(100);

		if (!(PINC&(1<<0)))//once button is pressed
  58:	98 99       	sbic	0x13, 0	; 19
  5a:	02 c0       	rjmp	.+4      	; 0x60 <__SREG__+0x21>

             {
				
              if(UCSRA&(1<<UDRE))
  5c:	5d 99       	sbic	0x0b, 5	; 11

                { 

                  UDR = 0b11110000;//once transmitter is ready sent eight bit data
  5e:	9c b9       	out	0x0c, r25	; 12

                 }
				  //_delay_ms(100);

               }
       if(UCSRA&(1<<RXC))
  60:	5f 9b       	sbis	0x0b, 7	; 11
  62:	fa cf       	rjmp	.-12     	; 0x58 <__SREG__+0x19>
		 {
		 	
			
			if(UDR==0b11110000)
  64:	8c b1       	in	r24, 0x0c	; 12
  66:	80 3f       	cpi	r24, 0xF0	; 240
  68:	b9 f7       	brne	.-18     	; 0x58 <__SREG__+0x19>
		     {
		      PORTC |=(1<<1);
  6a:	a9 9a       	sbi	0x15, 1	; 21
  6c:	f5 cf       	rjmp	.-22     	; 0x58 <__SREG__+0x19>

0000006e <_exit>:
  6e:	f8 94       	cli

00000070 <__stop_program>:
  70:	ff cf       	rjmp	.-2      	; 0x70 <__stop_program>
